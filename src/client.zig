const std = @import("std");
const vaxis = @import("vaxis");
const DoublyLinkedList = std.DoublyLinkedList;
const net = std.net;

const TextInput = vaxis.widgets.TextInput;
/// Set the default panic handler to the vaxis panic_handler. This will clean up the terminal if any
/// panics occur
pub const panic = vaxis.panic_handler;

var x_offset: u16 = 0;

/// Set some scope levels for the vaxis scopes
pub const std_options: std.Options = .{
    .log_scope_levels = &.{
        .{ .scope = .vaxis, .level = .warn },
        .{ .scope = .vaxis_parser, .level = .warn },
    },
};

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop
    // is started
};

/// The application state
const MessagerApp = struct {
    allocator: std.mem.Allocator,
    // A flag for if we should quit
    should_quit: bool,
    /// The tty we are talking to
    tty: vaxis.Tty,
    /// The vaxis instance
    vx: vaxis.Vaxis,
    /// A mouse event that we will handle in the draw cycle
    mouse: ?vaxis.Mouse,

    /// Text Input for the message box
    text_input: vaxis.widgets.TextInput,

    /// Message History
    message_history: DoublyLinkedList([]u8),

    /// client stuff
    stream: ?std.net.Stream,
    // Writer to write to connected socket
    writer: ?std.net.Stream.Writer,
    port: u16 = 1234,
    connected: bool = false,
    username: [:0]const u8,

    pub fn init(allocator: std.mem.Allocator, username: [:0]const u8) !MessagerApp {
        var vx_instance = try vaxis.init(allocator, .{});
        return .{
            .allocator = allocator,
            .should_quit = false,
            .tty = try vaxis.Tty.init(),
            .vx = vx_instance,
            .mouse = null,
            .text_input = TextInput.init(allocator, &vx_instance.unicode),
            .message_history = .{},
            .writer = null,
            .stream = null,
            .username = username,
        };
    }

    pub fn init_connection(self: *MessagerApp) !void {
        if (self.connected) {
            const already_connected_msg = try std.fmt.allocPrint(self.allocator, "You are already connected to: 127.0.0.1:{d}", .{self.port});
            defer self.allocator.free(already_connected_msg);
            try self.add_to_history(already_connected_msg);
            return;
        }
        const peer = try net.Address.parseIp4("127.0.0.1", self.port);
        const stream = net.tcpConnectToAddress(peer) catch |err| {
            // Format error message
            const error_msg = try std.fmt.allocPrint(self.allocator, "Connection failed (port {d}): {s}", .{ self.port, @errorName(err) });
            defer self.allocator.free(error_msg);

            // Add error to history
            try self.add_to_history(error_msg);
            return; // or return; if you don't want to propagate the error
        };
        self.connected = true;

        self.stream = stream; // stream closed in deinit
        self.writer = stream.writer();
        // Format the message using allocPrint
        const connection_message = try std.fmt.allocPrint(self.allocator, "Connected to: 127.0.0.1:{d}", .{self.port});
        defer self.allocator.free(connection_message);

        try self.add_to_history(connection_message);
    }

    pub fn deinit(self: *MessagerApp) void {
        // Cleanup message history
        var it = self.message_history.first;
        while (it) |node| {
            const next = node.next;
            self.allocator.free(node.data);
            self.allocator.destroy(node);
            it = next;
        }
        // Reset the list to empty
        self.message_history = .{};
        self.vx.deinit(self.allocator, self.tty.anyWriter());
        self.tty.deinit();
        self.text_input.deinit();
        self.stream.?.close();
    }

    pub fn run(self: *MessagerApp) !void {
        // Initialize our event loop. This particular loop requires intrusive init
        var loop: vaxis.Loop(Event) = .{
            .tty = &self.tty,
            .vaxis = &self.vx,
        };
        try loop.init();

        // Start the event loop. Events will now be queued
        try loop.start();

        try self.vx.enterAltScreen(self.tty.anyWriter());

        // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
        try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

        // Enable mouse events
        try self.vx.setMouseMode(self.tty.anyWriter(), true);

        // Main event loop
        while (!self.should_quit) {
            // pollEvent blocks until we have an event
            loop.pollEvent();
            // tryEvent returns events until the queue is empty
            while (loop.tryEvent()) |event| {
                try self.update(event);
            }
            // Draw our application after handling events
            self.draw();

            // It's best to use a buffered writer for the render method. TTY provides one, but you
            // may use your own. The provided bufferedWriter has a buffer size of 4096
            var buffered = self.tty.bufferedWriter();
            // Render the application to the screen
            try self.vx.render(buffered.writer().any());
            try buffered.flush();
        }
    }

    /// Update our application state from an event
    pub fn update(self: *MessagerApp, event: Event) !void {
        switch (event) {
            .key_press => |key| {
                if (key.matches('c', .{ .ctrl = true })) {
                    self.should_quit = true;
                } else if (key.matches(vaxis.Key.enter, .{})) {
                    try self.send_message();
                } else if (key.matches('p', .{ .ctrl = true })) {
                    try self.init_connection();
                } else {
                    try self.text_input.update(.{ .key_press = key });
                }
            },
            .mouse => |mouse| self.mouse = mouse,
            .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
            else => {},
        }
    }

    /// Draw our current state
    pub fn draw(self: *MessagerApp) void {
        const win = self.vx.window();

        win.clear();

        const child = win.child(.{
            .x_off = win.width / 2,
            .y_off = 0,
            .width = .{ .limit = (win.width / 2) - 2 },
            .height = .{ .limit = win.height },
            .border = .{ .where = .all },
        });
        child.clear();

        const message_box = win.child(.{
            .x_off = 1,
            .y_off = 1,
            .width = .{ .limit = (win.width / 2) - 2 },
            .height = .{ .limit = 3 },
            .border = .{ .where = .all },
        });

        self.text_input.draw(message_box);

        var it = self.message_history.first;
        var y_offset: u32 = 3;
        var i: u16 = 0; // NOTE: Does this cause a misalignment on CPU, should I use u32 regardless?
        if (child.height > 0) {
            std.debug.assert(child.height > 0);
            while (it) |node| : (it = node.next) {
                if (i <= (child.height - 1)) {
                    if (i < win.height) {
                        _ = try child.printSegment(.{ .text = node.data }, .{ .row_offset = (win.height - y_offset) });
                        y_offset += 1;
                        i += 1;
                    }
                }
            }
        }
    }

    /// Sends message to a connected server
    pub fn send_message(self: *MessagerApp) !void {
        // Clears and returns input in TextInput
        const msg = try self.text_input.toOwnedSlice();
        defer self.allocator.free(msg);

        // Create a new string that combines username and message
        const msg_with_username = try std.fmt.allocPrint(self.allocator, "{s}: {s}", .{ self.username, msg });
        defer self.allocator.free(msg_with_username);

        if (self.writer) |writer| {
            _ = try writer.write(msg_with_username);
            try self.add_to_history(msg);
        } else {
            try self.add_to_history("Not Connected to server");
        }
    }

    /// Adds current TextInput to the message history
    pub fn add_to_history(self: *MessagerApp, message: []const u8) !void {
        // Add new message
        const msg_copy = try self.allocator.dupe(u8, message); // can i free this memory here?
        const node = try self.allocator.create(DoublyLinkedList([]u8).Node);
        node.* = .{ .data = msg_copy };
        self.message_history.prepend(node);
    }
};

/// Keep our main function small. Typically handling arg parsing and initialization only
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        const deinit_status = gpa.deinit();
        //fail test; can't try in defer as defer is executed after we return
        if (deinit_status == .leak) {
            std.log.err("memory leak", .{});
        }
    }
    const allocator = gpa.allocator();

    // Read in arguements
    var args = try std.process.argsWithAllocator(allocator);
    defer args.deinit();

    _ = args.next(); // Clear path
    const username = args.next() orelse "Username";

    // Initialize our application
    var app = try MessagerApp.init(allocator, username);
    defer app.deinit();

    // Run the application
    try app.run();
}
