const std = @import("std");
const vaxis = @import("vaxis");
const DoublyLinkedList = std.DoublyLinkedList;

const TextInput = vaxis.widgets.TextInput;
/// Set the default panic handler to the vaxis panic_handler. This will clean up the terminal if any
/// panics occur
pub const panic = vaxis.panic_handler;

var x_offset: u16 = 0;

/// Set some scope levels for the vaxis scopes
pub const std_options: std.Options = .{
    .log_scope_levels = &.{
        .{ .scope = .vaxis, .level = .warn },
        .{ .scope = .vaxis_parser, .level = .warn },
    },
};

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop
    // is started
};

/// The application state
const MyApp = struct {
    allocator: std.mem.Allocator,
    // A flag for if we should quit
    should_quit: bool,
    /// The tty we are talking to
    tty: vaxis.Tty,
    /// The vaxis instance
    vx: vaxis.Vaxis,
    /// A mouse event that we will handle in the draw cycle
    mouse: ?vaxis.Mouse,

    /// Text Input for the message box
    text_input: vaxis.widgets.TextInput,

    /// Message History
    message_history: DoublyLinkedList([]u8),

    /// client stuff
    port: u16 = 1234,

    pub fn init(allocator: std.mem.Allocator) !MyApp {
        var vx_instance = try vaxis.init(allocator, .{});
        return .{
            .allocator = allocator,
            .should_quit = false,
            .tty = try vaxis.Tty.init(),
            .vx = vx_instance,
            .mouse = null,
            .text_input = TextInput.init(allocator, &vx_instance.unicode),
            .message_history = .{},
        };
    }

    pub fn deinit(self: *MyApp) void {
        // Cleanup message history
        var it = self.message_history.first;
        while (it) |node| {
            const next = node.next;
            self.allocator.free(node.data);
            self.allocator.destroy(node);
            it = next;
        }
        // Deinit takes an optional allocator. You can choose to pass an allocator to clean up
        // memory, or pass null if your application is shutting down and let the OS clean up the
        // memory
        self.vx.deinit(self.allocator, self.tty.anyWriter());
        self.tty.deinit();
        self.text_input.deinit();
    }

    pub fn run(self: *MyApp) !void {
        // Initialize our event loop. This particular loop requires intrusive init
        var loop: vaxis.Loop(Event) = .{
            .tty = &self.tty,
            .vaxis = &self.vx,
        };
        try loop.init();

        // Start the event loop. Events will now be queued
        try loop.start();

        try self.vx.enterAltScreen(self.tty.anyWriter());

        // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
        // This will automatically enable the features in the screen you are in, so you will want to
        // call it after entering the alt screen if you are a full screen application. The second
        // arg is a timeout for the terminal to send responses. Typically the response will be very
        // fast, however it could be slow on ssh connections.
        try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

        // Enable mouse events
        try self.vx.setMouseMode(self.tty.anyWriter(), true);

        // This is the main event loop. The basic structure is
        // 1. Handle events
        // 2. Draw application
        // 3. Render
        while (!self.should_quit) {
            // pollEvent blocks until we have an event
            loop.pollEvent();
            // tryEvent returns events until the queue is empty
            while (loop.tryEvent()) |event| {
                try self.update(event);
            }
            // Draw our application after handling events
            self.draw();

            // It's best to use a buffered writer for the render method. TTY provides one, but you
            // may use your own. The provided bufferedWriter has a buffer size of 4096
            var buffered = self.tty.bufferedWriter();
            // Render the application to the screen
            try self.vx.render(buffered.writer().any());
            try buffered.flush();
        }
    }

    /// Update our application state from an event
    pub fn update(self: *MyApp, event: Event) !void {
        switch (event) {
            .key_press => |key| {
                // key.matches does some basic matching algorithms. Key matching can be complex in
                // the presence of kitty keyboard encodings, this will generally be a good approach.
                // There are other matching functions available for specific purposes, as well
                if (key.matches('c', .{ .ctrl = true })) {
                    self.should_quit = true;
                } else if (key.matches('e', .{})) {
                    try self.send_message();
                } else {
                    try self.text_input.update(.{ .key_press = key });
                }
            },
            .mouse => |mouse| self.mouse = mouse,
            .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
            else => {},
        }
    }

    /// Draw our current state
    pub fn draw(self: *MyApp) void {
        // Window is a bounded area with a view to the screen. You cannot draw outside of a windows
        // bounds. They are light structures, not intended to be stored.
        const win = self.vx.window();

        // Clearing the window has the effect of setting each cell to it's "default" state. Vaxis
        // applications typically will be immediate mode, and you will redraw your entire
        // application during the draw cycle.
        win.clear();

        const child = win.child(.{
            .x_off = win.width / 2,
            .y_off = 0,
            .width = .{ .limit = (win.width / 2) - 2 },
            .height = .{ .limit = win.height },
            .border = .{ .where = .all },
        });

        const message_box = win.child(.{
            .x_off = 1,
            .y_off = 1,
            .width = .{ .limit = (win.width / 2) - 2 },
            .height = .{ .limit = 3 },
            .border = .{ .where = .all },
        });

        self.text_input.draw(message_box);

        // TODO: Handle message history going out of bounds (idk how?)
        var it = self.message_history.last;
        var y_offset: u32 = 3;
        while (it) |node| : (it = node.prev) {
            _ = try child.printSegment(.{ .text = node.data }, .{ .row_offset = (win.height - y_offset) });
            y_offset += 1;
        }
    }

    pub fn send_message(self: *MyApp) !void {
        const msg = try self.text_input.toOwnedSlice();
        defer self.allocator.free(msg);

        try self.add_to_history(msg);
    }

    pub fn add_to_history(self: *MyApp, message: []const u8) !void {
        // Add new message
        const msg_copy = try self.allocator.dupe(u8, message);
        const node = try self.allocator.create(DoublyLinkedList([]u8).Node);
        node.* = .{ .data = msg_copy };
        self.message_history.prepend(node);
    }
};

/// Keep our main function small. Typically handling arg parsing and initialization only
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        const deinit_status = gpa.deinit();
        //fail test; can't try in defer as defer is executed after we return
        if (deinit_status == .leak) {
            std.log.err("memory leak", .{});
        }
    }
    const allocator = gpa.allocator();

    // Initialize our application
    var app = try MyApp.init(allocator);
    defer app.deinit();

    // Run the application
    try app.run();
}
